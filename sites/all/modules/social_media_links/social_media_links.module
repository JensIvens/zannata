<?php
/**
 * @file
 * Functions for the Social Media Links module.
 */

include_once 'social_media_links.platforms.inc';
include_once 'social_media_links.iconsets.inc';

/**
 * Implements hook_init().
 */
function social_media_links_init() {
  drupal_add_css(drupal_get_path('module', 'social_media_links') . '/social_media_links.css');
}

/**
 * Implements hook_theme().
 */
function social_media_links_theme($existing, $type, $theme, $path) {
  return array(
    'social_media_links_platforms' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function social_media_links_block_info() {
  $blocks['social-media-links'] = array(
    'info' => t('Social Media Links'),
    // We cache per role, so that the edit/configure links display only if the
    // user has access.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function social_media_links_block_configure($delta = '') {
  if ($delta === 'social-media-links') {
    $form = array();

    // Platforms.
    $form['platforms'] = array(
      '#type' => 'fieldset',
      '#title' => t('Platforms'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#theme' => 'social_media_links_platforms',
    );

    $platform_values = variable_get('social_media_links_platforms', array());
    $platforms = social_media_links_platforms();

    if (!empty($platform_values)) {
      // Combine the platforms with the weight value for sorting.
      foreach ($platforms as $key => $value) {
        if (isset($platform_values[$key]['weight'])) {
          $platforms[$key]['weight'] = $platform_values[$key]['weight'];
        }
      }

      uasort($platforms, 'drupal_sort_weight');
    }

    $i = -10;
    foreach ($platforms as $key => $value) {
      $form['platforms'][$key] = array(
        'platform_value' => array(
          '#type' => 'textfield',
          '#title' => $value['title'],
          '#title_display' => 'invisible',
          '#size' => 40,
          '#field_prefix' => $value['base url'],
          '#default_value' => isset($platform_values[$key]['platform_value']) ? $platform_values[$key]['platform_value'] : '',
        ),
        'weight' => array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#title_display' => 'invisible',
          '#delta' => 10,
          '#default_value' => isset($platform_values[$key]['weight']) ? $platform_values[$key]['weight'] : $i + 1,
          '#attributes' => array('class' => 'weight'),
        ),
      );
      $i++;
    }

    // Appearance.
    $form['appearance'] = array(
      '#type' => 'fieldset',
      '#title' => t('Appearance'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $appearance_values = variable_get('social_media_links_appearance', array());
    $form['appearance']['orientation'] = array(
      '#type' => 'select',
      '#title' => t('Orientation'),
      '#default_value' => isset($appearance_values['orientation']) ? $appearance_values['orientation'] : 'h',
      '#options' => array(
        'v' => t('vertical'),
        'h' => t('horizontal'),
      ),
    );
    $form['appearance']['show_name'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show name'),
      '#description' => t('Show the platform name next to the icon.'),
      '#default_value' => isset($appearance_values['show_name']) ? $appearance_values['show_name'] : 0,
    );

    // Link Attributes.
    $form['link_attributes'] = array(
      '#type' => 'fieldset',
      '#title' => t('Link attributes'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $link_values = variable_get('social_media_links_link_attributes', array());
    $form['link_attributes']['target'] = array(
      '#type' => 'select',
      '#title' => t('Default target'),
      '#default_value' => isset($link_values['target']) ? $link_values['target'] : '<none>',
      '#options' => array(
        '<none>' => t('Remove target attribute'),
        '_blank' => t('Open in a new browser window or tab (_blank)'),
        '_self' => t('Open in the current window (_self)'),
        '_parent' => t('Open in the frame that is superior to the frame the link is in (_parent)'),
        '_top' => t('Cancel all frames and open in full browser window (_top)'),
      ),
    );
    $form['link_attributes']['rel'] = array(
      '#type' => 'select',
      '#title' => t('Default rel'),
      '#default_value' => isset($link_values['rel']) ? $link_values['rel'] : '<none>',
      '#options' => array(
        '<none>' => t('Remove rel attribute'),
        'nofollow' => t('Set nofollow'),
      ),
    );

    // Icon Sets.
    $form['icons'] = array(
      '#type' => 'fieldset',
      '#title' => t('Icon Sets'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $options = social_media_links_iconsets_options();
    $form['icons']['icon_style'] = array(
      '#type' => 'select',
      '#title' => t('Icon Style'),
      '#default_value' => variable_get('social_media_links_icon_style', ''),
      '#options' => $options,
    );

    // Generate the icon set table.
    $header = array(
      array(
        'data' => t('Name'),
        'style' => 'width: 150px;',
      ),
      t('Sizes'),
      t('Icon examples and download instructions'),
    );

    $rows = array();
    $icons = social_media_links_iconsets();
    foreach ($icons as $iconset_name => $iconset) {
      if (isset($iconset['download url'])) {
        $name = '<strong>' . l($iconset['name'], $iconset['download url'], array('attributes' => array('target' => '_blank'))) . '</strong>';
      }
      else {
        $name = '<strong>' . $iconset['name'] . '</strong>';
      }

      if (isset($iconset['publisher'])) {
        $name .= '<br />' . t('by') . ' ';
        if (isset($iconset['publisher url'])) {
          $name .= l($iconset['publisher'], $iconset['publisher url'], array('attributes' => array('target' => '_blank')));
        }
        else {
          $name .= $iconset['publisher'];
        }
      }

      $row = array(
        $name,
        implode('<br />', $iconset['styles']),
      );

      if (!empty($iconset['path'])) {
        $row[] = _social_media_links_generate_example_table($platforms, $iconset);
      }
      else {
        $searchdirs = social_media_links_searchdirs($iconset_name);

        $str = '<strong>' . t('Not installed.') . '</strong><br />';
        $str .= t('To install: !download and install it into',
          array(
            '!download' => l(t('Download'), $iconset['download url'], array('attributes' => array('target' => '_blank'))),
          )
        );
        $str .= ' <code> DRUPAL_ROOT/' . preg_replace('/,([^,]+) ?$/', " " . t('or') . " $1", implode(', ', $searchdirs), 1) . '</code>.';

        if (isset($iconset['additional instructions'])) {
          $str .= ' ' . $iconset['additional instructions'];
        }
        $row[] = $str;
      }

      $rows[] = $row;
      $vars = array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array(
          'id' => 'social-media-links-iconsets',
        ),
      );

      $form['icons']['installed'] = array(
        '#markup' => theme('table', $vars),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function social_media_links_block_save($delta = '', $edit = array()) {
  if ($delta === 'social-media-links') {
    variable_set('social_media_links_platforms', $edit['platforms']);
    variable_set('social_media_links_appearance', $edit['appearance']);
    variable_set('social_media_links_link_attributes', $edit['link_attributes']);
    variable_set('social_media_links_icon_style', $edit['icon_style']);
  }
}

/**
 * Implements hook_block_view().
 */
function social_media_links_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'social-media-links':
      $block['subject'] = t('Follow Us');
      $block['content'] = social_media_links_block_view_content();
      break;
  }

  return $block;
}

/**
 * Custom function to assemble renderable array for block content.
 *
 * @return array
 *   Returns a renderable array with the block content.
 */
function social_media_links_block_view_content() {
  $block = array();

  $platform_values = variable_get('social_media_links_platforms');

  if (count($platform_values) < 1) {
    return $block;
  }

  $appearance_values = variable_get('social_media_links_appearance');
  $link_values = variable_get('social_media_links_link_attributes');
  $icon_style = explode(':', variable_get('social_media_links_icon_style'));

  $platform_infos = social_media_links_platforms();
  $platforms = array();
  uasort($platform_values, 'drupal_sort_weight');
  foreach ($platform_values as $platform_name => $platform) {
    if (!empty($platform['platform_value'])) {
      $platform_url = $platform_infos[$platform_name]['base url'] . $platform['platform_value'];

      // Call the url callback of the platform.
      if (isset($platform_infos[$platform_name]['url callback'])) {
        $platform_url_changed = call_user_func($platform_infos[$platform_name]['url callback'], $platform_infos[$platform_name]['base url'], $platform['platform_value']);
        if ($platform_url_changed) {
          $platform_url = $platform_url_changed;
        }
      }

      // Generate the link render array.
      $platforms[$platform_name] = array(
        'href' => $platform_url,
        'title' => theme('image', array(
          'path' => social_media_links_icon($icon_style[0], $platform_name, $icon_style[1]),
          'alt' => isset($platform_infos[$platform_name]['image alt']) ? $platform_infos[$platform_name]['image alt'] : $platform_infos[$platform_name]['title'] . ' ' . t('icon'),
        )),
        'attributes' => array(
          'title' => $platform_infos[$platform_name]['title'],
        ),
        'html' => TRUE,
      );
      if (!empty($appearance_values['show_name'])) {
        if ($appearance_values['orientation'] == 'h') {
          $platforms[$platform_name]['title'] .= '<br />';
        }
        $platforms[$platform_name]['title'] .= '<span>' . $platform_infos[$platform_name]['title'] . '</span>';
        unset($platforms[$platform_name]['attributes']);
      }
      if (!isset($platform_infos[$platform_name]['link attributes']) || $platform_infos[$platform_name]['link attributes']) {
        if ($link_values['target'] != '<none>') {
          $platforms[$platform_name]['attributes']['target'] = $link_values['target'];
        }
        if ($link_values['rel'] != '<none>') {
          $platforms[$platform_name]['attributes']['rel'] = $link_values['rel'];
        }
      }
    }
  }

  // Block output in HTML with the div wrapper.
  $block = array(
    'platforms' => array(
      '#theme' => 'links',
      '#links' => $platforms,
      '#attributes' => array(
        'class' => array('links', 'social-media-links'),
      ),
    ),
  );

  if ($appearance_values['orientation'] == 'h') {
    $block['platforms']['#attributes']['class'][] = 'inline horizontal';
  }
  else {
    $block['platforms']['#attributes']['class'][] = 'vertical';
  }

  return $block;
}

/**
 * Get the available platforms.
 *
 * @return array
 *   Returns a list of platforms.
 */
function social_media_links_platforms() {
  $platforms = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($platforms)) {
    return $platforms;
  }
  $platforms = array();
  $platforms = module_invoke_all('social_media_links_platform_info');

  drupal_alter('social_media_links_platform_info_alter', $platforms);

  return $platforms;
}

/**
 * Get all registered icon sets.
 *
 * @return array
 *   Return a list of all registered platforms.
 */
function social_media_links_iconsets() {
  $sets = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($sets)) {
    return $sets;
  }
  $sets = array();
  $sets = module_invoke_all('social_media_links_iconset_info');

  foreach ($sets as $key => $set) {
    unset($sets[$key]['path']);
    if ($path = social_media_links_iconset_path($key)) {
      $sets[$key]['path'] = social_media_links_iconset_path($key);
    }
  }

  drupal_alter('social_media_links_iconset_info_alter', $sets);

  return $sets;
}

/**
 * Get informations about a specific icon set.
 *
 * @param string $iconset
 *   Name of the icon set.
 *
 * @return array
 *   Informations about the icon set.
 */
function social_media_links_iconset($iconset) {
  $sets = social_media_links_iconsets();
  return isset($sets[$iconset]) ? $sets[$iconset] : FALSE;
}

/**
 * Get the path of a platform icon.
 *
 * @param string $iconset
 *   Name of the icon set.
 * @param string $platform
 *   Name of the platform.
 * @param string $style
 *   Icon size.
 *
 * @return string
 *   Path to the icon image.
 */
function social_media_links_icon($iconset, $platform, $style) {
  $iconset = social_media_links_iconset($iconset);
  return call_user_func($iconset['path callback'], $platform, $style);
}

/**
 * Returns an array with the possible locations of the installed iconsets.
 *
 * @param string $iconset
 *   Optional: Name of the iconset.
 *
 * @return array
 *   Possible path locations of the iconsets.
 */
function social_media_links_searchdirs($iconset = '') {
  $searchdirs = array();

  $profile = drupal_get_path('profile', drupal_get_profile());
  $config = conf_path();

  // Similar to 'modules' and 'themes' directories in the root directory,
  // certain distributions may want to place libraries into a 'libraries'
  // directory in Drupal's root directory.
  $searchdirs[] = 'libraries';

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory. But exclude/ignore the standard drupal profiles.
  if (!in_array($profile, array('minimal', 'standard', 'testing'))) {
    $searchdirs[] = "$profile/libraries";
  }

  // Always search sites/all/libraries.
  $searchdirs[] = 'sites/all/libraries';

  // Also search sites/<domain>/libraries.
  $searchdirs[] = "$config/libraries";

  if (!empty($iconset)) {
    foreach ($searchdirs as $key => $dir) {
      $searchdirs[$key] = $dir . '/' . $iconset;
    }
  }

  return $searchdirs;
}

/**
 * Return an array of library directories.
 *
 * @return array
 *   A list of library directories.
 */
function social_media_links_libraries() {
  $directories = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($directories)) {
    return $directories;
  }

  $searchdirs = social_media_links_searchdirs();

  // Add the social_media_links module directory.
  $searchdirs[] = drupal_get_path('module', 'social_media_links') . '/libraries';

  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdirs as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}

/**
 * Return the library path of an icon set.
 *
 * @param string $iconset
 *   Name of the icon set.
 *
 * @return string
 *   Path of the icon set.
 */
function social_media_links_iconset_path($iconset) {
  $path = FALSE;
  $libraries = social_media_links_libraries();
  if (array_key_exists($iconset, $libraries)) {
    $path = $libraries[$iconset];
  }

  return $path;
}

/**
 * Get the list options for the icon set style select.
 *
 * @return array
 *   Array with the select options.
 */
function social_media_links_iconsets_options() {
  $iconsets = social_media_links_iconsets();
  $options = array();

  foreach ($iconsets as $iconset_name => $iconset) {
    if (!empty($iconset['path'])) {
      foreach ($iconset['styles'] as $sid => $style) {
        $options[$iconset['name']][$iconset_name . ':' . $sid] = $style;
      }
    }
  }

  return $options;
}

/**
 * Returns HTML for the platform table with tabledrag.
 */
function theme_social_media_links_platforms(&$variables) {
  $form = $variables['form'];

  $rows = array();
  foreach (element_children($form) as $platform) {
    $form[$platform]['weight']['#attributes']['class'] = array('platforms-order-weight');
    $rows[] = array(
      'data' => array(
        '<strong>' . $form[$platform]['platform_value']['#title'] . '<strong>',
        array('class' => array('platform-cross'), 'data' => drupal_render($form[$platform]['platform_value'])),
        array('class' => array('tabledrag-hide'), 'data' => drupal_render($form[$platform]['weight'])),
      ),
      'class' => array('draggable'),
    );
  }

  $header = array(
    t('Platform'),
    '',
    array(
      'class' => array('tabledrag-hide'),
      'data' => t('Weight'),
    ),
  );

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'platforms-order'),
  ));

  drupal_add_tabledrag('platforms-order', 'order', 'silbing', 'platforms-order-weight');

  return $output;
}

/**
 * Helper function to generate the icon set example table.
 *
 * @param array $platforms
 *   Keyed array with all available platforms.
 * @param array $iconset
 *   Array with the information about the icon set.
 *
 * @return string
 *   The generated table markup.
 */
function _social_media_links_generate_example_table($platforms, $iconset) {
  if (!is_array($platforms) && count($platforms) == 0) {
    return '';
  }

  $groups = array_chunk($platforms, 10, TRUE);
  $output = '';

  foreach ($groups as $group) {
    $header = array();
    $row = array();

    foreach ($group as $platform_name => $platform) {
      $header[] = array(
        'data' => $platform['title'],
        'style' => 'text-align: center; ',
      );

      $vars = array('path' => call_user_func($iconset['path callback'], $platform_name));

      if (file_exists($vars['path'])) {
        $row[] = array(
          'data' => theme('image', $vars) . ' ',
          'style' => 'text-align: center;',
        );
      }
      else {
        $row[] = array(
          'data' => '–',
          'style' => 'text-align: center;',
        );
      }
    }

    $vars = array(
      'header' => $header,
      'rows' => array('data' => $row),
    );
    $output .= theme('table', $vars);
    $output .= '<br />';
  }

  return $output;
}
